import telebot
import Bot.config as config
import Bot.script as script
from ar—Åhive.finder_mfc import finder_mfc
from Bot.responder import get_answer
import Bot.utils as utils
from recordControl import RecordControl
from Answerer.spellCheck import spellCheck


bot = telebot.TeleBot(config.token)

# from DB.MakeDB import delete_DB, Base, engine, post_MFC
# Base.metadata.create_all(bind=engine)
# post_MFC()


@bot.message_handler(commands=['start'])
def greet(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ç—Ä—ë–Ω–∞, —è —á–∞—Ç-–±–æ—Ç –¥–ª—è –ú–§–¶.\n"
                                      "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º:\n"
                                      "1. –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –æ—Ñ–∏—Å –ú–§–¶.\n"
                                      "2. –ó–∞–ø–∏—Å–∞—Ç—å –≤ –ú–§–¶.\n"
                                      "3. –ü–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å",
                     reply_markup=utils.generate_mainMenu_markup())


@bot.message_handler(commands=['help'])
def info(message):
    bot.reply_to(message, "–¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º)")


@bot.message_handler(content_types=["text"])
def answer(message):
    current_text = spellCheck(message.text.lower())
    if "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" == current_text:
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é..", reply_markup=utils.generate_mainMenu_markup())

    elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å" == current_text:
         record = RecordControl()
         temp = record.getInfoAboutRecordByChatID(chatID=message.chat.id)
         if temp:
             bot.send_message(message.chat.id, f"–ü—Ä–æ–≤–µ—Ä–∏–ª–∞ –∑–∞–ø–∏—Å—å üòÅ\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {temp[2]} \n{temp[1]} –Ω–∞ {temp[0]} ü•≥",
                              reply_markup=utils.generate_mainMenu_markup())
         else:
             bot.send_message(message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã", reply_markup=utils.generate_mainMenu_markup())

    elif "–±–ª–∏–∂–∞–π—à–∏–π –º—Ñ—Ü" == current_text:
        keyboard = telebot.types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
        button_geo = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
        keyboard.add(button_geo)
        bot.send_message(message.chat.id, "–î–ª—è —ç—Ç–æ–≥–æ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É"
                                          " –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                         reply_markup=keyboard)
    elif "–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã" == current_text:
        bot.send_message(message.chat.id, "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                         reply_markup=utils.generate_markup(["–ü–∞—Å–ø–æ—Ä—Ç", "–°–ù–ò–õ–°", "–ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                                                             "–ë–ª–∏–∂–∞–π—à–∏–π –ú–§–¶"], 2, mainMenu=True))

    elif "–∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é" == current_text:
        script.appointment(message)  # —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø–∏—Å–∏

    elif "–≥–æ—Å—É—Å–ª—É–≥–∏" == current_text:
        keyboard = telebot.types.InlineKeyboardMarkup()
        url_button = telebot.types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ì–æ—Å—É—Å–ª—É–≥–∏", url="https://www.gosuslugi.ru/")
        keyboard.add(url_button)
        bot.send_message(message.chat.id, "–Ø –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Å–Ω–∏–∑—É –≤—Å–µ —Å—Å—ã–ª–∫–∏, —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ.",
                         reply_markup=keyboard)

    else:
        try:
            get_answer(message, bot)
        except Exception as e:
            print(e)


@bot.message_handler(content_types=["location"])
def location(message):
    if message.location is not None:
        bot.send_message(message.chat.id,
                         f"–ë–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –í–∞–º: \n{finder_mfc(message.location.latitude, message.location.longitude)}",
                         reply_markup=utils.generate_mainMenu_markup())


if __name__ == "__main__":
    bot.infinity_polling()
